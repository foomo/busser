// Code generated by gotsrpc https://github.com/foomo/gotsrpc/v2  - DO NOT EDIT.

package service

import (
	go_context "context"
	go_net_http "net/http"

	github_com_foomo_busser_table "github.com/foomo/busser/table"
	github_com_foomo_busser_table_validation "github.com/foomo/busser/table/validation"
	gotsrpc "github.com/foomo/gotsrpc/v2"
	pkg_errors "github.com/pkg/errors"
)

type ServiceGoTSRPCClient interface {
	Commit(ctx go_context.Context, id github_com_foomo_busser_table.ID, version github_com_foomo_busser_table.Version) (retCommit_0 *ErrorCommit, clientErr error)
	Delete(ctx go_context.Context, id github_com_foomo_busser_table.ID, versions []github_com_foomo_busser_table.Version) (err *ErrorDelete, clientErr error)
	GetCommitted(ctx go_context.Context, id github_com_foomo_busser_table.ID) (t *github_com_foomo_busser_table.Table, vt *github_com_foomo_busser_table_validation.Table, err *ErrorGet, clientErr error)
	GetVersion(ctx go_context.Context, id github_com_foomo_busser_table.ID, version github_com_foomo_busser_table.Version) (t *github_com_foomo_busser_table.Table, vt *github_com_foomo_busser_table_validation.Table, err *ErrorGet, clientErr error)
	List(ctx go_context.Context) (retList_0 github_com_foomo_busser_table.Map, retList_1 *ErrorGet, clientErr error)
	Validate(ctx go_context.Context, id github_com_foomo_busser_table.ID) (t *github_com_foomo_busser_table.Table, vt *github_com_foomo_busser_table_validation.Table, err *ErrorValidation, clientErr error)
}

type HTTPServiceGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultServiceGoTSRPCClient(url string) *HTTPServiceGoTSRPCClient {
	return NewServiceGoTSRPCClient(url, "/services/busser")
}

func NewServiceGoTSRPCClient(url string, endpoint string) *HTTPServiceGoTSRPCClient {
	return NewServiceGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewServiceGoTSRPCClientWithClient(url string, endpoint string, client *go_net_http.Client) *HTTPServiceGoTSRPCClient {
	return &HTTPServiceGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPServiceGoTSRPCClient) Commit(ctx go_context.Context, id github_com_foomo_busser_table.ID, version github_com_foomo_busser_table.Version) (retCommit_0 *ErrorCommit, clientErr error) {
	args := []interface{}{id, version}
	reply := []interface{}{&retCommit_0}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "Commit", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call service.ServiceGoTSRPCProxy Commit")
	}
	return
}

func (tsc *HTTPServiceGoTSRPCClient) Delete(ctx go_context.Context, id github_com_foomo_busser_table.ID, versions []github_com_foomo_busser_table.Version) (err *ErrorDelete, clientErr error) {
	args := []interface{}{id, versions}
	reply := []interface{}{&err}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "Delete", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call service.ServiceGoTSRPCProxy Delete")
	}
	return
}

func (tsc *HTTPServiceGoTSRPCClient) GetCommitted(ctx go_context.Context, id github_com_foomo_busser_table.ID) (t *github_com_foomo_busser_table.Table, vt *github_com_foomo_busser_table_validation.Table, err *ErrorGet, clientErr error) {
	args := []interface{}{id}
	reply := []interface{}{&t, &vt, &err}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "GetCommitted", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call service.ServiceGoTSRPCProxy GetCommitted")
	}
	return
}

func (tsc *HTTPServiceGoTSRPCClient) GetVersion(ctx go_context.Context, id github_com_foomo_busser_table.ID, version github_com_foomo_busser_table.Version) (t *github_com_foomo_busser_table.Table, vt *github_com_foomo_busser_table_validation.Table, err *ErrorGet, clientErr error) {
	args := []interface{}{id, version}
	reply := []interface{}{&t, &vt, &err}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "GetVersion", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call service.ServiceGoTSRPCProxy GetVersion")
	}
	return
}

func (tsc *HTTPServiceGoTSRPCClient) List(ctx go_context.Context) (retList_0 github_com_foomo_busser_table.Map, retList_1 *ErrorGet, clientErr error) {
	args := []interface{}{}
	reply := []interface{}{&retList_0, &retList_1}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "List", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call service.ServiceGoTSRPCProxy List")
	}
	return
}

func (tsc *HTTPServiceGoTSRPCClient) Validate(ctx go_context.Context, id github_com_foomo_busser_table.ID) (t *github_com_foomo_busser_table.Table, vt *github_com_foomo_busser_table_validation.Table, err *ErrorValidation, clientErr error) {
	args := []interface{}{id}
	reply := []interface{}{&t, &vt, &err}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "Validate", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call service.ServiceGoTSRPCProxy Validate")
	}
	return
}
