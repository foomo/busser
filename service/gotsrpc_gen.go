// Code generated by gotsrpc https://github.com/foomo/gotsrpc/v2  - DO NOT EDIT.

package service

import (
	io "io"
	ioutil "io/ioutil"
	http "net/http"
	time "time"

	github_com_foomo_busser_table "github.com/foomo/busser/table"
	gotsrpc "github.com/foomo/gotsrpc/v2"
)

const (
	ServiceGoTSRPCProxyCommit       = "Commit"
	ServiceGoTSRPCProxyDelete       = "Delete"
	ServiceGoTSRPCProxyGetCommitted = "GetCommitted"
	ServiceGoTSRPCProxyGetVersion   = "GetVersion"
	ServiceGoTSRPCProxyList         = "List"
	ServiceGoTSRPCProxyValidate     = "Validate"
)

type ServiceGoTSRPCProxy struct {
	EndPoint string
	service  Service
}

func NewDefaultServiceGoTSRPCProxy(service Service) *ServiceGoTSRPCProxy {
	return &ServiceGoTSRPCProxy{
		EndPoint: "/services/busser",
		service:  service,
	}
}

func NewServiceGoTSRPCProxy(service Service, endpoint string) *ServiceGoTSRPCProxy {
	return &ServiceGoTSRPCProxy{
		EndPoint: endpoint,
		service:  service,
	}
}

// ServeHTTP exposes your service
func (p *ServiceGoTSRPCProxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		if r.Method == http.MethodOptions {
			return
		}
		gotsrpc.ErrorMethodNotAllowed(w)
		return
	}
	defer io.Copy(ioutil.Discard, r.Body) // Drain Request Body

	funcName := gotsrpc.GetCalledFunc(r, p.EndPoint)
	callStats := gotsrpc.GetStatsForRequest(r)
	if callStats != nil {
		callStats.Func = funcName
		callStats.Package = "github.com/foomo/busser/service"
		callStats.Service = "Service"
	}
	switch funcName {
	case ServiceGoTSRPCProxyCommit:
		var (
			arg_id      github_com_foomo_busser_table.ID
			arg_version github_com_foomo_busser_table.Version
		)
		args := []interface{}{&arg_id, &arg_version}
		err := gotsrpc.LoadArgs(&args, callStats, r)
		if err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		commitRet := p.service.Commit(arg_id, arg_version)
		if callStats != nil {
			callStats.Execution = time.Now().Sub(executionStart)
		}
		gotsrpc.Reply([]interface{}{commitRet}, callStats, r, w)
		return
	case ServiceGoTSRPCProxyDelete:
		var (
			arg_id       github_com_foomo_busser_table.ID
			arg_versions []github_com_foomo_busser_table.Version
		)
		args := []interface{}{&arg_id, &arg_versions}
		err := gotsrpc.LoadArgs(&args, callStats, r)
		if err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		deleteErr := p.service.Delete(arg_id, arg_versions)
		if callStats != nil {
			callStats.Execution = time.Now().Sub(executionStart)
		}
		gotsrpc.Reply([]interface{}{deleteErr}, callStats, r, w)
		return
	case ServiceGoTSRPCProxyGetCommitted:
		var (
			arg_id github_com_foomo_busser_table.ID
		)
		args := []interface{}{&arg_id}
		err := gotsrpc.LoadArgs(&args, callStats, r)
		if err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		getCommittedT, getCommittedVt, getCommittedErr := p.service.GetCommitted(arg_id)
		if callStats != nil {
			callStats.Execution = time.Now().Sub(executionStart)
		}
		gotsrpc.Reply([]interface{}{getCommittedT, getCommittedVt, getCommittedErr}, callStats, r, w)
		return
	case ServiceGoTSRPCProxyGetVersion:
		var (
			arg_id      github_com_foomo_busser_table.ID
			arg_version github_com_foomo_busser_table.Version
		)
		args := []interface{}{&arg_id, &arg_version}
		err := gotsrpc.LoadArgs(&args, callStats, r)
		if err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		getVersionT, getVersionVt, getVersionErr := p.service.GetVersion(arg_id, arg_version)
		if callStats != nil {
			callStats.Execution = time.Now().Sub(executionStart)
		}
		gotsrpc.Reply([]interface{}{getVersionT, getVersionVt, getVersionErr}, callStats, r, w)
		return
	case ServiceGoTSRPCProxyList:
		executionStart := time.Now()
		listRet, listRet_1 := p.service.List()
		if callStats != nil {
			callStats.Execution = time.Now().Sub(executionStart)
		}
		gotsrpc.Reply([]interface{}{listRet, listRet_1}, callStats, r, w)
		return
	case ServiceGoTSRPCProxyValidate:
		var (
			arg_id github_com_foomo_busser_table.ID
		)
		args := []interface{}{&arg_id}
		err := gotsrpc.LoadArgs(&args, callStats, r)
		if err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		validateT, validateVt, validateErr := p.service.Validate(arg_id)
		if callStats != nil {
			callStats.Execution = time.Now().Sub(executionStart)
		}
		gotsrpc.Reply([]interface{}{validateT, validateVt, validateErr}, callStats, r, w)
		return
	default:
		gotsrpc.ClearStats(r)
		http.Error(w, "404 - not found "+r.URL.Path, http.StatusNotFound)
	}
}
